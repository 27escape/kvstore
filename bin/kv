#!/usr/bin/env node
// this is overly verbose to help things along
// -----------------------------------------------------------------------------
/**
 * @name    kv
 * @description Simple Key-Value store with namespaces for simple apps to use
 * @author  Kevin Mulholland
 * @licence MIT
 * @version 0.0.1
 */
// -----------------------------------------------------------------------------

// make sure we are checking for basic coding errors
'use strict';
'use esversion: 6';

// -----------------------------------------------------------------------------
const VERSION = '0.0.1';
const KV_VERSION = '1.0.0';

const path = require('path');
const os = require('os');
const PROGRAM = path.basename(process.argv[1]).replace(/\.js$/, '');
const STORE_FILE = path.join(os.homedir(), '.kvstore.json');
const dotjson = require('dot-json');
const store = new dotjson(STORE_FILE);

const program = require('commander');
const shell = require('shelljs');

const debug = require('debug')(PROGRAM);
const verbose = require('debug');

// const CONFIG_DIR = path.join(process.env.HOME, `.${PROGRAM}`);

// make some things easy to use
const log = console.log;
const error = console.error;

// Do you ever need to sleep within an async function?
// await new Promise(r => setTimeout(r, 2000));

// -----------------------------------------------------------------------------

// you need this to cleanly catch CTRL+C and nicely exit
process.once('SIGINT', function (code) {
  tidyExit(2, 'SIGINT received...');
});

// -----------------------------------------------------------------------------
// run this function either when you exit or if called by SIGINT etc
function tidyExit (lvl, msg) {
  // do system cleanup actions

  if (lvl) {
    msg && console.error(msg);
    process.exit(lvl);
  }
}
// this happens for a normal nice exit
process.on('beforeExit', (code) => {
  if (code) {
    console.log('Process beforeExit event with code: ', code);
  }
});
// this happens if you call process.exit with a non-zero code
// its not possible to call async functions (or promises) now
process.on('exit', (code) => {
  // console.log('About to exit with code: ', code);
});

function trimStr (str) {
  return str.trim();
}

// -----------------------------------------------------------------------------
// we have a main function as an async function, so that we can await for activities in it!

async function main () {
  let completed = false;
  program
    .description(`${PROGRAM}: Simple Key-Value store with namespaces for simple apps to use`)
    .version(VERSION, '--version')
    .option('-v, --verbose', 'enable verbose debug', () => { verbose.enable('*'); })
    // .option('--default <value>', 'defaultstring input', 'some default')
    .option('-n, --ns <value>', 'Namespace to use', trimStr);

  if (!shell.test('-f', STORE_FILE)) {
    debug('creating the KV store file');
    // create the KV file the first time around
    store
      .set('store.version', KV_VERSION)
      .set('store.accesses', 0)
      .set('store.updates', 0)
      .set('store.last_modified', Date.now())
      .set('store.version', 1)
      .save('store.namespaces', {});
  }
  const about = store.get('store');
  if (!about) {
    error(`Error: KV store file ${STORE_FILE} is invalid`);
    program.help();
  }
  store.set('store.accesses', about.accesses + 1).save();

  // get the passed arguments, help provided by default

  program.command('add <key> <value>')
    .description('add a new key/value pair')
    .action((key, value) => {
      key = key.trim();
      value = value.trim();
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      if (!key || value === undefined) {
        error('Error: key field must be specified, as must a value');
        program.help();
      }
      store
        .set(`store.namespaces.${program.ns}.${key}`, value)
        .set('store.last_modified', Date.now())
        .set('store.updates', about.updates + 1)
        .save();
      completed = true;
    })
    .on('--help', () => {
      console.log(`
  Example:

    kv --ns test add key 'test string'
 `);
    })
  ;
  program.command('delete <key>')
    .description('delete everything associated with the key')
    .alias('del')
    .alias('rm')
    .action((key) => {
      key = key.trim();
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }
      if (!key) {
        error('Error: key field must be specified');
        program.help();
      }

      store
        .delete(`store.namespaces.${program.ns}.${key}`)
        .set('store.last_modified', Date.now())
        .set('store.updates', about.updates + 1)
        .save();
      completed = true;
    })
    .on('--help', () => {
      console.log(`
  Example:

    kv --ns test delete key
 `);
    })
  ;

  program.command('get <key>')
    .description('Get the value for the passed key')
    .action((key) => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }
      key = key.trim();
      if (!key) {
        error('Error: key field must be specified');
        program.help();
      }
      const value = store.get(`store.namespaces.${program.ns}.${key}`);
      if (typeof value !== 'undefined') {
        console.log(value);
      }
    })
    .on('--help', () => {
      console.log(`
  Example:

    kv --ns test get key
 `);
    })
  ;

  program.command('like <regexp>')
    .description('Find all matching keys that are like the passed key regexp')
    .action((regexp) => {
      regexp = regexp.trim();
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }
      if (!regexp) {
        error('Error: key field must be specified');
        program.help();
      }
      try {
        const re = new RegExp(regexp, 'i');
        const list = store.get(`store.namespaces.${program.ns}`);
        Object.keys(list).sort().forEach((key) => {
          if (key.match(re)) {
            console.log(`${key}\t\t${list[key]}`);
          }
        });
      } catch {
        console.log(`Nothing found for namespace ${program.ns}`);
      }
    })
    .on('--help', () => {
      console.log(`
  Example:

    kv --ns test get key
 `);
    })
  ;

  program.command('list')
    .alias('ls')
    .description('list everything associated with the namespace')
    .action(() => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }
      try {
        const list = store.get(`store.namespaces.${program.ns}`);
        Object.keys(list).sort().forEach((key) => {
          console.log(`${key}\t\t${list[key]}`);
        });
      } catch {
        console.log(`Nothing found for namespace ${program.ns}`);
      }
      completed = true;
    })
    .on('--help', () => {
      console.log(`
  Example:

    kv --ns test list
  `);
    })
  ;

  program.command('dump')
    .description('dump the full file data')
    .action(() => {
      const d = new Date(about.last_modified);
      about.last_modified = d.toISOString();
      console.log(`file: ${STORE_FILE}\n\nData:`, about);
      completed = true;
    })
    .on('--help', () => {
      console.log(`
  Example:

    kv dump
  `);
    })
  ;

  // note that this does not remove things from process.argv
  program.parse(process.argv);

  // log('Things going well so far');
  // log(store.get('store'));
  // debug('started');
  //
}

// -----------------------------------------------------------------------------
// now we start the main activity and catch any errors
main().then(() => {
  // stuff todo after main completes, probably may not use this
  tidyExit(0);
})
  .catch(err => {
    log('there was an error');
    tidyExit(1, err);
  });
