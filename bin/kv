#!/usr/bin/env node
// this is overly verbose to help things along
// -----------------------------------------------------------------------------
/**
 * @name    kv
 * @description Simple Key-Value store with namespaces for simple apps to use
 * @author  Kevin Mulholland
 * @licence MIT
 * @version 0.0.1
 */
// -----------------------------------------------------------------------------

// make sure we are checking for basic coding errors
'use strict';
'use esversion: 6';

// -----------------------------------------------------------------------------

const path = require('path');
const os = require('os');
const PROGRAM = path.basename(process.argv[1]).replace(/\.js$/, '');

const pj = require('../package.json');
const VERSION = pj.version || 'unknown';
const DEFAULT_STORE = path.join(os.homedir(), 'Repos', 'personal', 'dotfiles', 'kvstores', 'generalstore.json');
const STORE_FILE = process.env.KV_STORE_FILE || DEFAULT_STORE;
const program = require('commander');

const debug = require('debug')(PROGRAM);
const verbose = require('debug');
const sprintf = require('sprintf-js').sprintf;

const KVStore = require('../lib/kvstore');

// make some things easy to use
const log = console.log;
const error = console.error;

// Do you ever need to sleep within an async function?
// await new Promise(r => setTimeout(r, 2000));

// -----------------------------------------------------------------------------

// you need this to cleanly catch CTRL+C and nicely exit
process.once('SIGINT', function (code) {
  tidyExit(2, 'SIGINT received...');
});

// -----------------------------------------------------------------------------
// run this function either when you exit or if called by SIGINT etc
function tidyExit (lvl, msg) {
  // do system cleanup actions

  if (lvl) {
    msg && error(msg);
    process.exit(lvl);
  }
}
// this happens for a normal nice exit
process.on('beforeExit', (code) => {
  if (code) {
    log('Process beforeExit event with code: ', code);
  }
});

// this happens if you call process.exit with a non-zero code
// its not possible to call async functions (or promises) now
process.on('exit', (code) => {
  // log('About to exit with code: ', code);
});

/**
   * nicley write out the key value
   *
   * @function     showKeyValue
   * @param      {string}  key     The key
   * @param      {object}  value   The value, a string or object
   * @param      {string}  separator   The string to separate keys and values
   */
function showKeyValue (key, value, separator) {
  let str;
  separator ||= ':' ;
  if (value !== undefined) {
    if (typeof (value) === 'object') {
      // separator for objects is ALWAYS ':'
      str = sprintf('%-21s %s', `${key}:`, JSON.stringify(value, null, 2));
    } else {
      str = sprintf('%-21s %s', `${key}${separator}`, value);
    }
  }
  log(str);
}

/**
   * nicely write out the value.
   *
   * @function     showValue
   * @param      {object}   value   The value, object or string
   */
function showValue (value) {
  let str = value || '';
  if (value !== '' && typeof (value) === 'object') {
    str = JSON.stringify(value, null, 2);
  }

  log(str);
}

function trimStr (str) {
  return str.trim();
}

// -----------------------------------------------------------------------------
// we have a main function as an async function, so that we can await for activities in it!

async function main () {
  program
    .storeOptionsAsProperties()
    .description(`${PROGRAM}: Simple Key-Value store with namespaces for simple apps to use`)
    .version(VERSION, '--version')
    .option('-v, --verbose', 'enable verbose debug', function () { verbose.enable('*'); })
    .requiredOption('-f, --file <filename>', 'KV store file to use, export KV_STORE_FILE to skip passing this parameter', STORE_FILE)
    .option('-n, --ns <value>', 'Namespace to use', trimStr)
    .option('-s --separator <value>', 'key and value field separator', ':')
    .option('-e, --echo', 'echo stored value where applicable');

  // get the passed arguments, help provided by default

  program.command('put <key> <value>')
    .alias('add')
    .description('put a new key/value pair, overwrites any existing value for that key')
    .action((key, value) => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      const retval = kv.put(key, value);
      if (program.echo) {
        showValue(retval);
      }
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test put key 'test string'
 `);
    })
  ;

  program.command('get <key>')
    .description('Get the value for the passed key')
    .action((key) => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      key = key.trim();
      if (!key) {
        error('Error: key field must be specified');
        program.help();
      }

      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      showValue(kv.get(key));
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test get key
 `);
    })
  ;

  program.command('delete <key>')
    .description('delete everything associated with the key')
    .alias('del')
    .alias('rm')
    .action((key) => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }
      key = key.trim();
      if (!key) {
        error('Error: key field must be specified');
        program.help();
      }
      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      const retval = kv.delete(key);
      if (program.echo) {
        showValue(retval);
      }
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test delete key
 `);
    })
  ;

  program.command('incr <key> [value]')
    .description('increment the value of a key by a given amount, 1 if missing')
    .action((key, value) => {
      key = key.trim();
      value = value ? value.trim() : 1;
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      if (!key) {
        error('Error: key field must be specified, as must a value');
        program.help();
      }
      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      const retval = kv.incr(key, value);
      if (program.echo) {
        showValue(retval);
      }
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test incr counter 10
 `);
    })
  ;

  program.command('decr <key> [value]')
    .description('decrement the value of a key by a given amount, 1 if missing')
    .action((key, value) => {
      key = key.trim();
      value = value ? value.trim() : 1;
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      if (!key) {
        error('Error: key field must be specified, as must a value');
        program.help();
      }
      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      const retval = kv.decr(key, value);
      if (program.echo) {
        showValue(retval);
      }
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test decr counter 10
 `);
    })
  ;

  program.command('push <key> <value>')
    .alias('enqueue')
    .description('push a value onto the END of the array/queue indexed by key')
    .action((key, value) => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      kv.push(key, value);
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test push key 'test string'
 `);
    })
  ;

  program.command('pop <key>')
    .description('pop a value from the END of the array indexed by key')
    .action((key, value) => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      const retval = kv.pop(key, value);
      showValue(retval);
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test pop key
 `);
    })
  ;

  program.command('unshift <key> <value>')
    .description('unshift a value onto the START of the array indexed by key')
    .action((key, value) => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      kv.unshift(key, value);
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test unshift key 'test string'
 `);
    })
  ;

  program.command('shift <key>')
    .alias('dequeue')
    .description('shift a value from the START of the array/queue indexed by key')
    .action((key, value) => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      const retval = kv.shift(key, value);
      showValue(retval);
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test shift key
 `);
    })
  ;

  program.command('peek <key>')
    .description('look at the value at the START of the array/queue indexed by key, DOES NOT REMOVE IT')
    .action((key, value) => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      let retval = kv.get(key, value);
      if (Array.isArray(retval)) {
        retval = retval[0];
      }
      showValue(retval);
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test shift key
 `);
    })
  ;

  program.command('length <key>')
    .description('get the length of the array/queue indexed by key')
    .action((key, value) => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }

      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      let retval = kv.get(key, value);
      if (Array.isArray(retval)) {
        retval = retval.length();
      } else {
        retval = 1;
      }
      showValue(retval);
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test shift key
 `);
    })
  ;

  program.command('find <regexp>')
    .alias('like')
    .description('Find all matching keys that are like the passed key regexp')
    .action((regexp) => {
      regexp = regexp.trim();
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }
      if (!regexp) {
        error('Error: key field must be specified');
        program.help();
      }
      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      const matches = kv.find(regexp);
      Object.keys(matches).forEach((key) => {
        // there is only one subkey for the found item
        Object.keys(matches[key]).forEach((subkey) => {
          showKeyValue(subkey, matches[key][subkey], program.separator);
        });
      });
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test find key
 `);
    })
  ;

  program.command('list')
    .alias('ls')
    .description('list everything associated with the namespace')
    .action(() => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }
      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      const found = kv.list();
      found.forEach((ele) => {
        Object.keys(ele).sort().forEach((key) => {
          showKeyValue(key, ele[key], program.separator);
        });
      });
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test list
  `);
    })
  ;

  program.command('keys')
    .description('list just the top level keys associated with the namespace')
    .action(() => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }
      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      log(kv.keys().join('\n'));
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test keys
  `);
    })
  ;

  program.command('values')
    .description('list just the top level values associated with the namespace')
    .action(() => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }
      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      log(kv.values().join('\n'));
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test values
  `);
    })
  ;

  program.command('spaced')
    .description('list just the top level keys associated with the namespace, space separated')
    .action(() => {
      if (!program.ns) {
        error('Error: ns field must be specified');
        program.help();
      }
      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      log(kv.keys().join(' '));
    })
    .on('--help', () => {
      log(`
  Example:

    kv --ns test spaced
  `);
    })
  ;

  program.command('export')
    .alias('dump')
    .description('dump the namespace data')
    .action(() => {
      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      log(JSON.stringify(kv.export(), null, 2));
    })
    .on('--help', () => {
      log(`
  Example:

    kv export
  `);
    })
  ;

  program.command('info')
    .description('get info about the store, nothing about the namespaces')
    .action(() => {
      const kv = new KVStore({ filename: program.file, namespace: program.ns });
      log(JSON.stringify(kv.info(), null, 2));
    })
    .on('--help', () => {
      log(`
  Example:

    kv dump
  `);
    })
  ;

  // note that this does not remove things from process.argv
  program.parse(process.argv);
}

// -----------------------------------------------------------------------------
// now we start the main activity and catch any errors
main().then(() => {
  // stuff todo after main completes, probably may not use this
  tidyExit(0);
})
  .catch(err => {
    // log('there was an error');
    tidyExit(1, err.message);
  });
